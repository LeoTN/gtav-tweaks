name: Build GTAV_Tweaks Installer

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release Version"
        type: string
        default: "0.0.0.0"
        required: true

      is_pre_release:
        type: boolean
        description: "Beta-Release"
        default: true
        required: true
        
  workflow_call:
    inputs:
      version:
        description: "Release Version"
        type: string
        default: "0.0.0.0"
        required: true

      is_pre_release:
        type: boolean
        description: Beta-Release"
        default: true
        required: true

env:
  FINAL_EXECUTABLE_NAME: GTAV_Tweaks.exe
  POWERSHELL_LAUNCHER_EXECUTABLE_NAME: launchWithGTAV_PowerShell_launcher.exe
  CURRENT_VERSION_FILE_NAME: currentVersion.csv
  FINAL_INSTALLER_NAME: GTAV_Tweaks_v${{ inputs.version }}_Installer.msi
  RELEASE_VERSION: ${{ inputs.version }}
  RELEASE_NAME: ""
  IS_PRE_RELEASE: ${{ inputs.is_pre_release }}

jobs:
  build_exe_files:
    name: Build and Upload Executable Artifacts
    runs-on: windows-2019

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Create Version File
      run: |
        function readFromCSVFile() {
            Param(
                [Parameter(Mandatory = $true)]
                [String]$pFileLocation
            )
            
            # Stops here because the file does not exist.
            If (-not (Test-Path -Path $pFileLocation)) {
                $null = Write-Host "[readFromCSVFile()] [WARNING] The file [$pFileLocation] does not exist." -ForegroundColor "Yellow"
                # We are using $null because $false would cause an error.
                Return $null
            }
            Try {
                # Reads the .CSV file and converts it into a hashtable.
                $content = @{}
                Import-Csv -Path $pFileLocation | ForEach-Object {
                    $content[$_.Key] = $_.Value
                }
                $null = Write-Host "[readFromCSVFile()] [INFO] The content of the CSV file [$pFileLocation] has been successfully read."
                Return $content
            }
            Catch {
                $null = Write-Host "[readFromCSVFile()] [ERROR] Failed to read the content of the CSV file [$pFileLocation]. Detailed error description below.`n" -ForegroundColor "Red"
                $null = Write-Host "***START***[`n$Error`n]***END***" -ForegroundColor "Red"
                # We are using $null because $false would cause an error.
                Return $null
            }
        }

        function writeToCSVFile() {
            Param(
                [Parameter(Mandatory = $true)]
                [String]$pFileLocation,
                [Parameter(Mandatory = $true)]
                [hashtable]$pContent,
                [Parameter(Mandatory = $false)]
                [switch]$pSwitchForce
            )
        
            # Stops here because the file exists and the function is told to not overwrite the file.
            If ((Test-Path -Path $pFileLocation) -and !$pSwitchForce) {
                $null = Write-Host "[writeToCSVFile()] [WARNING] The file [$pFileLocation] is already present. Use [-pSwitchForce] to overwrite it." -ForegroundColor "Yellow"
                Return $false
            }
            Try {
                # Writes the hashtable into the file.
                $pContent.GetEnumerator() | Select-Object -Property @{Name = "Key"; Expression = { $_.Key } }, @{Name = "Value"; Expression = { $_.Value } } | Export-Csv -Path $pFileLocation -Encoding Default -NoTypeInformation
                $null = Write-Host "[writeToCSVFile()] [INFO] The given hashtable has been successfully written to [$pFileLocation]."
                Return $true
            }
            Catch {
                $null = Write-Host "[writeToCSVFile()] [ERROR] Failed to write the given hashtable to [$pFileLocation]. Detailed error description below.`n" -ForegroundColor "Red"
                $null = Write-Host "***START***[`n$Error`n]***END***" -ForegroundColor "Red"
                Return $false
            }
        }

        if ($env:IS_PRE_RELEASE -eq "true") {
            $releaseName = "v${env:RELEASE_VERSION}-beta"
        }
        else {
            $releaseName = "v${env:RELEASE_VERSION}"
        }

        # Updates the current version file.
        $currentVersionFileLocation = "${{ github.workspace }}\library\build\$env:CURRENT_VERSION_FILE_NAME"
        $currentVersionFileObject = readFromCSVFile -pFileLocation $currentVersionFileLocation
        $currentVersionFileObject["CURRENT_VERSION"] = $releaseName
        $null = writeToCSVFile -pFileLocation $currentVersionFileLocation -pContent $currentVersionFileObject -pSwitchForce

    - name: Upload Current Version File as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.CURRENT_VERSION_FILE_NAME }}
        path: ${{ github.workspace }}\library\build\${{ env.CURRENT_VERSION_FILE_NAME }}

    - name: Extract Autohotkey Compiler
      run: |
        # Set Variables
        $ahkFolder = "${{ github.workspace }}\ahk"
        $ahkV2Folder = "${{ github.workspace }}\ahk-v2"

        # Extract the files.
        $null = Expand-Archive -Path "${{ github.workspace }}\compiler\ahk.zip" -DestinationPath $ahkFolder
        $null = Expand-Archive -Path "${{ github.workspace }}\compiler\ahk-v2.zip" -DestinationPath $ahkV2Folder

    - name: Compile Autohotkey PowerShell Launcher Script
      run: |
        # Set the paths to execute more easily.
        $scriptPathIn = "${{ github.workspace }}\library\build\launchWithGTAV_PowerShell_launcher.ahk"
        $scriptPathOut = "${{ github.workspace }}\$env:POWERSHELL_LAUNCHER_EXECUTABLE_NAME"

        # Compile the script.
        $null = Start-Process -FilePath ".\ahk\Compiler\Ahk2Exe.exe" -ArgumentList "/in $scriptPathIn /out $scriptPathOut /base "".\ahk-v2\AutoHotkey64.exe"" /silent verbose" -Wait
        $null = Write-Host "[INFO] The executable will be saved to [$scriptPathOut]."

    - name: Compile Autohotkey Main Script
      run: |
        # Set the paths to execute more easily.
        $scriptPathIn = "${{ github.workspace }}\GTAV_Tweaks.ahk"
        $scriptPathOut = "${{ github.workspace }}\$env:FINAL_EXECUTABLE_NAME"

        # Compile the script.
        $null = Start-Process -FilePath ".\ahk\Compiler\Ahk2Exe.exe" -ArgumentList "/in $scriptPathIn /out $scriptPathOut /base "".\ahk-v2\AutoHotkey64.exe"" /silent verbose" -Wait
        $null = Write-Host "[INFO] The executable will be saved to [$scriptPathOut]."

    - name: Upload Main Executable as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FINAL_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}\${{ env.FINAL_EXECUTABLE_NAME }}

    - name: Upload PowerShell Launcher Executable as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.POWERSHELL_LAUNCHER_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}\${{ env.POWERSHELL_LAUNCHER_EXECUTABLE_NAME }}
 

  build_msi_file:
    name: Build and Upload MSI Installer File
    needs: build_exe_files
    runs-on: windows-2019

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Main Executable Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.FINAL_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}

    - name: Download PowerShell Launcher Executable Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.POWERSHELL_LAUNCHER_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}\library\build

    - name: Download Current Version File Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.CURRENT_VERSION_FILE_NAME }}
        path: ${{ github.workspace }}\library\build

    - name: Define Final Installer Name
      run: |
          # The name only changes when the release is a beta release.
          if ($env:IS_PRE_RELEASE -eq "true") {
            $finalInstallerName = "GTAV_Tweaks_v${{ inputs.version }}-beta_Installer.msi"
            echo "FINAL_INSTALLER_NAME=$finalInstallerName" >> $env:GITHUB_ENV
          }
          else {
            $finalInstallerName = "${{ env.FINAL_INSTALLER_NAME }}"
          }
          $null = Write-Host "[INFO] The final installer name is [$finalInstallerName]."

    - name: Build .AIP project
      uses: caphyon/advinst-github-action@main
      with:
          advinst-enable-automation: true
          aip-path: ${{ github.workspace }}\compiler\GTAV_TweaksInstaller.aip
          aip-build-name: DefaultBuild
          aip-package-name: ${{ env.FINAL_INSTALLER_NAME }}
          aip-output-dir:  ${{ github.workspace }}
          aip-commands: |
            SetVersion "${{ env.RELEASE_VERSION }}"

    - name: Upload Installer as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FINAL_INSTALLER_NAME }}
        path: ${{ github.workspace }}\${{ env.FINAL_INSTALLER_NAME }}


  create_release:
    name: Download Installer Aritfact and Create Release
    needs: build_msi_file
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Define Final Installer Name
      run: |
        # The name only changes when the release is a beta release.
        if [ "${{ env.IS_PRE_RELEASE }}" == "true" ]; then
          finalInstallerName="GTAV_Tweaks_v${{ inputs.version }}-beta_Installer.msi"
          echo "FINAL_INSTALLER_NAME=$finalInstallerName" >> $GITHUB_ENV
        else
          finalInstallerName="${{ env.FINAL_INSTALLER_NAME }}"
        fi
        echo "[INFO] The final installer name is [$finalInstallerName]."

    - name: Define Release Name
      run: |
        if [ "${{ env.IS_PRE_RELEASE }}" == "true" ]; then
          releaseName="v${{ env.RELEASE_VERSION }}-beta"
        else
          releaseName="v${{ env.RELEASE_VERSION }}"
        fi
        echo "RELEASE_NAME=$releaseName" >> $GITHUB_ENV
        echo "[INFO] The release name is [$releaseName]."

    - name: Download Installer Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.FINAL_INSTALLER_NAME }}
        path: ${{ github.workspace }}

    - name: Delete Old Beta Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git fetch --prune --unshallow --tags
        latest_tag=$(git describe --tags --abbrev=0)
        echo "[INFO] Found latest tag [$latest_tag]."

        # Check if the tag is a beta release.
        if [[ "$latest_tag" == v* && "$latest_tag" == *-beta ]]; then
          echo "[INFO] Deleting old beta release and tag [$latest_tag]."
            
          # Delete the old beta release.
          RELEASE_ID=$(gh api -X GET "/repos/${{ github.repository }}/releases" | jq -r ".[] | select(.tag_name==\"$latest_tag\") | .id")
          if [ -n "$RELEASE_ID" ]; then
            gh api -X DELETE "/repos/${{ github.repository }}/releases/$RELEASE_ID"
            echo "[INFO] Deleted release for tag [$latest_tag]."
          else
            echo "[INFO] No release found for tag [$latest_tag]."
          fi

          # Deletes the old beta tag.
          git tag --delete "$latest_tag"
          git push --delete origin "$latest_tag"
          echo "[INFO] Deleted tag [$latest_tag]."

        else
          echo "[WARNING] Could not find a beta release and tag to delete."
        fi

    - name: Create or Update Release Tag
      uses: richardsimko/update-tag@v1
      with:
        tag_name: ${{ env.RELEASE_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: ${{ github.workspace }}/${{ env.FINAL_INSTALLER_NAME }}
        artifactErrorsFailBuild: true
        artifactContentType: "application/executable"
        removeArtifacts: true
        replacesArtifacts: true
        body: '**Download** the **[${{ env.FINAL_INSTALLER_NAME }}](https://github.com/LeoTN/gtav-tweaks/releases/download/${{ env.RELEASE_NAME }}/${{ env.FINAL_INSTALLER_NAME }})** file and install it. Have fun :)'
        generateReleaseNotes: false
        makeLatest: true
        prerelease: ${{ env.IS_PRE_RELEASE == 'true' }}
        name: ${{ env.RELEASE_NAME }}
        tag: ${{ env.RELEASE_NAME }}